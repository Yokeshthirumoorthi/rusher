// Copyright Â© 2018 Yokesh Thirumoorthi
// [This program is licensed under the "MIT License"]
// Please see the file LICENSE in the source
// distribution of this software for license terms.

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import ChatWindow from './ChatWindow';
import QuillEditor from './QuillEditor';
import WSServices from './WSServices';

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      editorContent: [],
      chatMessages: []
    };
    this.handleReceivedMessage = this.handleReceivedMessage.bind(this);
    this.setEditorContents = this.setEditorContents.bind(this);
    this.sendWSMessage = this.sendWSMessage.bind(this);
    this.sendChatMessage = this.sendChatMessage.bind(this);
  }

  componentDidMount() {
    WSServices.init(this.handleReceivedMessage);
  }

  handleReceivedMessage(evt) {
    let data = evt.data;
    if (data === "Someone joined" || data === "Someone disconnected") return;
    let { source, payload } = JSON.parse(data)
    if (source === "editor") this.setEditorContents(payload);
    if (source === "chat") this.appendChatMessage(payload);
  }

  /**
   * Handles data from websocket
   * 
   * @param {Delta} content from peer editor with delta  
   */
  setEditorContents(content) {
    this.setState({ editorContent: content });
  }

  /**
  * Handles peer entered data for this users' view
  * 
  * @param {String} text entered by peer
  */
  appendChatMessage(text) {
    if (text.length > 0) {
      this.setState({
        chatMessages: [...this.state.chatMessages, {
          author: 'them',
          type: 'text',
          data: { text }
        }]
      })
    }
  }

  sendWSMessage(message) {
    let messageString = JSON.stringify(message);
    WSServices.sendMessage(messageString);
  }

  /**
   * Handles the user typed data
   * 
   * @param {JSON} message json generated by the chat launcher window 
   */
  sendChatMessage(message) {
    this.sendWSMessage(message);
    this.setState({
      chatMessages: [...this.state.chatMessages, message]
    });
  }

  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <h1 className="App-title">Welcome to React</h1>
        </header>
        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
        <QuillEditor sendMessage={this.sendWSMessage} data={this.state.editorContent} />
        <ChatWindow sendMessage={this.sendChatMessage} data={this.state.chatMessages} />
      </div>
    );
  }
}

export default App;
